#
#
#

Samsung S3C2410 processor
CONFIG_ARCH_S3C2410
 삼성에서 만든 S3C2410용 CPU를 탑재한 플랫폼을
지원하기 위해서

CONFIG_S3C2410_NAND_BOOT
 NAND 형 플래쉬 메모리로 부터 부팅을 합니다.

CONFIG_S3C2410_AMD_BOOT
 보드에 있는 AMD flash memory로 부터 부팅을 합니다.

CONFIG_BOOTUP_MEMTEST
  Test ram using a simple algorithm when a hardware is booting.
  If you want to boot from NAND flash memory, check that all required codes is
  loacated in 0x1000

CONFIG_ARCH_SA1100

Gamepark: OS Switching
CONFIG_S3C2400_GAMEPARK_OSSWITCH
  게임파크 보드에서 OS 스위칭을 지원하려면 'Y'를 하세요.
  그러면 부트로더의 TEXTADDR는 0x00100000이 되면 OS 스위칭이
  가능합니다.

Gamepark: Run on the ram
CONFIG_S3C2400_GAMEPARK_ON_RAM
  부트로더를 램에서 실행 시키고 싶으면 'Y'를 하세요.
  이때 부트로더의 TEXTADDR는 0x0c000000이 되면 디버거 장비를
  통해 램에 올려서 실행 할 수 있습니다.

#
# General setup
#
CPU Data Cache On
CONFIG_CPU_D_CACHE_ON
  CPU의 데이터 캐쉬data cache 기능을 사용하려면 'Y'를 하세요.
  사용하지 않는 것을 추천합니다. 왜냐고요?? VIVI는 캐쉬를 완전히
  고려하지 않았습니다.

CPU Instruction Cache On
CONFIG_CPU_I_CACHE_ON
  CPU의 명령어 캐쉬instruction cache 기능을 사용하려면 'Y'로 하세요.
  사용하지 않는 것을 추천합니다. 왜냐고요?? VIVI는 캐쉬를 완전히
  고려하지 않았습니다.

Power Management
CONFIG_PM
  커널에서 하는 전원 관리를 지원합니다. 'Y'로 할 것을 추천
  합니다.

Parse vivi private data from MTD
CONFIG_PARSE_PRIV_DATA
  VIVI가 사용하는 MTD 파티션 정보와 파라미터 값을 MTD 에서 읽어 오려
  고 합니다. 보통의 경우에 'Y'이지만, 피치 못 할 사정이 있으면 'N'로
  합니다. VIVI 개발 기간에 주로 사용합니다. 'N'로 하면 VIVI 내부에 있는
  디폴트 값만을 사용합니다.

Use user-defined parameter block
CONFIG_USE_PARAM_BLK
  MTD 파티션 정보, 비비 파라미터 값이 저장되어 있는 위치를 디폴트
  값이 아닌 사용자가 정의가 MTD 파티션에서 가져옵니다.
  원래 비비는 위의 정보를 플래쉬 메모리의 제일 뒤에 위치하게끔 설계
  되어있지만, 이를 사용하고 싶지 않을때는 'Y'로 하면 됩니다.

RAM test
CONFIG_MEMORY_RAM_TEST
  DRAM을 테스트 합니다. 다섯 단계로 테스트를 합니다.

Test mode
CONFIG_TEST
  부트로더의 테스트 기능을 내장시키고 싶으면 'Y'를 하세요.

Dispaly progress bar
CONFIG_MSG_PROGRESS
  시리얼로 다운받아 플래쉬에 쓸 때 진행 상태를 표시합니다.
  이놈을 사용하면 약간 시간이 더 걸리므로 불편하다고 생각하면
  안 쓰셔도 됩니다.

#
# Serial Port
#
CONFIG_SERIAL_TERM
  시리얼 터미널을 열어서 사용하려면 'Y'를 하세요.
  아마 꼭 'Y'를 하셔야 될 것입니다.

CONFIG_SERIAL_GETCMD_STD
  단순한 명령어 입력 기능을 원하시면 'Y'를 하세요.
  사용자의 명령어 입력하는 인터페이스가 아주 단순합니다.

CONFIG_SERIAL_GETCMD_EXT
  명령어 입력시 히스토리 기능을 사용하고 싶어면 'Y'를 하세요.

CONFIG_SERIAL_TERM_PROMPT
  시리얼 터미널에서 사용할 프롬프트를 정합니다. 16자 이하로
  정하면 됩니다.

#
# Memory Techonology Device
#

Memory Technology Device (MTD) support 
CONFIG_MTD
  Memory Technology Devices are flash, RAM and similar chips, often
  used for solid state file systems on embedded devices. This option
  will provide the generic support for MTD drivers to register
  themselves with the kernel and for potential users of MTD devices 
  to enumerate the devices which are present and obtain a handle on
  them. It will also allow you to select individual drivers for 
  particular hardware and users of MTD devices. If unsure, say N.

MTD debugging support 
CONFIG_MTD_DEBUG
  This turns on low-level debugging for the entire MTD sub-system.
  Normally, you should say 'N'.

MTD partitioning support 
CONFIG_MTD_PARTITIONS
  If you have a device which needs to divide its flash chip(s) up
  into multiple 'partitions', each of which appears to the user as 
  a separate MTD device, you require this option to be enabled. If
  unsure, say 'Y'.

  Note, however, that you don't need this option for the DiskOnChip
  devices. Partitioning on NFTL 'devices' is a different - that's the
  'normal' form of partitioning used on a block device.

Detect flash chips by Common Flash Interface (CFI) probe
CONFIG_MTD_CFI
  The Common Flash Interface specification was developed by Intel,
  AMD and other flash manufactures that provides a universal method
  for probing the capabilities of flash devices. If you wish to
  support any device that is CFI-compliant, you need to enable this
  option. Visit <http://www.amd.com/products/nvd/overview/cfi.html>
  for more information on CFI.

CFI Advanced configuration options
CONFIG_MTD_CFI_ADV_OPTIONS
  If you need to specify a specific endianness for access to flash
  chips, or if you wish to reduce the size of the kernel by including
  support for only specific arrangements of flash chips, say 'Y'. This
  option does not directly affect the code, but will enable other
  configuration options which allow you to do so.

  If unsure, say 'N'.

Specific CFI Flash geometry selection
CONFIG_MTD_CFI_GEOMETRY
  This option does not affect the code directly, but will enable
  some other configuration options which would allow you to reduce
  the size of the kernel by including support for only certain
  arrangements of CFI chips. If unsure, say 'N' and all options
  which are supported by the current code will be enabled.

Support 8-bit buswidth
CONFIG_MTD_CFI_B1
  If you wish to support CFI devices on a physical bus which is
  8 bits wide, say 'Y'.

Support 16-bit buswidth
CONFIG_MTD_CFI_B2
  If you wish to support CFI devices on a physical bus which is
  16 bits wide, say 'Y'.

Support 32-bit buswidth
CONFIG_MTD_CFI_B4
  If you wish to support CFI devices on a physical bus which is
  32 bits wide, say 'Y'.

Support 1-chip flash interleave
CONFIG_MTD_CFI_I1
  If your flash chips are not interleaved - i.e. you only have one
  flash chip addressed by each bus cycle, then say 'Y'.

Support 2-chip flash interleave
CONFIG_MTD_CFI_I2
  If your flash chips are interleaved in pairs - i.e. you have two
  flash chips addressed by each bus cycle, then say 'Y'.

Support 4-chip flash interleave
CONFIG_MTD_CFI_I4
  If your flash chips are interleaved in fours - i.e. you have four
  flash chips addressed by each bus cycle, then say 'Y'.

CFI support for Intel/Sharp Extended Command Set chips
CONFIG_MTD_CFI_INTELEXT
  The Common Flash Interface defines a number of different command
  sets which a CFI-compliant chip may claim to implement. This code
  provides support for one of those command sets, used on Intel
  StrataFlash and other parts.

CFI support for AMD/Fujitsu Standard Command Set chips
CONFIG_MTD_CFI_AMDSTD
  The Common Flash Interface defines a number of different command
  sets which a CFI-compliant chip may claim to implement. This code
  provides support for one of those command sets, used on chips
  chips including the AMD Am29LV320.

CFI support for Intel/Sharp Standard Commands
CONFIG_MTD_CFI_INTELSTD
  The Common Flash Interface defines a number of different command
  sets which a CFI-compliant chip may claim to implement. This code
  provides support for one of those command sets.

pre-CFI Sharp chip support
CONFIG_MTD_SHARP
  This option enables support for flash chips using Sharp-compatible
  commands, including some which are not CFI-compatible and hence
  cannot be used with the CONFIG_MTD_CFI_INTELxxx options.

AMD compatible flash chip support (non-CFI)
CONFIG_MTD_AMDSTD
  This option enables support for flash chips using AMD-compatible
  commands, including some which are not CFI-compatible and hence
  cannot be used with the CONFIG_MTD_CFI_AMDSTD option.

  It also works on AMD compatible chips that do conform to CFI.

CFI Flash device mapped on StrongARM SA11x0
CONFIG_MTD_SA1100
  This enables access to the flash chips on most platforms based on
  the SA1100 and SA1110, including the Assabet and the Compaq iPAQ.
  If you have such a board, say 'Y'.

#
# Add built-in commands
#
CONFIG_CMD_MEM
  Say 'Y' add a 'mem' command. It is a command that read, write,
  copy, compare contents in the RAM.

CONFIG_MEMORY_RAM_TEST
  Say 'Y' add a 'mem test' command. 

CONFIG_CMD_PARAM
  Say 'Y' add a 'param' command. It is a command that manage 
  vivi paramters.

CONFIG_CMD_PART
  Say 'Y' add a 'part' command. It is a command that manage 
  mtd partitions.

CONFIG_CMD_BONFS
  Say 'Y' add a 'bon' command. It is a command that read bon 
  partition information and define bon partition.


#
# System hacking
#

VIVI low-level debugging functions
CONFIG_DEBUG_LL
  Say Y here to include definitions of printchar, printhex
  in the vivi.  This is helpful if you are debugging code that
  executes before the console is initialized.
